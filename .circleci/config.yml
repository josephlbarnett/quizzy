version: 2.1
orbs:
  release: trib3/release@1.1.1
  heroku: circleci/heroku@1.0.1

jobs:
  build:
    docker:
      - image: circleci/openjdk:11-jdk-node

    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -XX:MaxRAM=2g

    steps:
      # get code
      - checkout
      # handle dependency caching and run build
      - restore_cache:
          keys:
            - v1-dependencies-{{ .Branch }}-{{ .Revision }}
            - v1-dependencies-{{ .Branch }}
            - v1-dependencies-
      - restore_cache:
          keys:
            - v1-npms-{{ .Branch }}-{{ .Revision }}
            - v1-npms-{{ .Branch }}
            - v1-npms-
      - run:
          name: npm build
          command: |
            cd client
            npm install
            npm run lint
            npm run build
            npm run test:unit
      - save_cache:
          paths:
            - ~/repo/client/node_modules
          key: v1-npms-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Maven Version
          command: |
            BASE_VERSION=$(mvn -q  -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec|sed 's/-SNAPSHOT.*//')
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              NEW_PROJECT_VERSION=${BASE_VERSION}.${CIRCLE_BUILD_NUM}
            else
              NEW_PROJECT_VERSION=${BASE_VERSION}-${CIRCLE_BRANCH}-SNAPSHOT
            fi
            mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${NEW_PROJECT_VERSION}
            echo ${NEW_PROJECT_VERSION} > ~/repo/current_version.txt
      - run: mvn install -U
      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ .Branch }}-{{ .Revision }}
      # collect test results and upload coverage
      - run: mkdir -p ~/test_results
      - run: find . -type f -regex ".*/target/surefire-reports/junitreports/.*xml" -exec cp {} ~/test_results/ \;
      - store_test_results:
          path: ~/test_results
      - store_artifacts:
          path: ~/test_results
      - run: bash <(curl -s https://codecov.io/bash) -t ${CODECOV_TOKEN}
      # collect docs
      - run: mkdir -p ~/docs
      - run: find . -type d -name 'dokka' -exec cp -r {} ~/docs/ \;
      - store_artifacts:
          path: ~/docs
      # collect built packages and save to workspace for deploy
      - run: mkdir -p ~/jars
      - run: find . -type f -regex ".*/target/.*jar" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*zip" -exec cp {} ~/jars/ \;
      - release/prep_release:
          release_dir: ~/jars/release
          current_version: ~/repo/current_version.txt
          current_version_import: True
      - store_artifacts:
          path: ~/jars
      - persist_to_workspace:
          root: ~/jars
          paths:
            - .

  deploy:
    docker:
      - image: circleci/openjdk:11-jdk-node
    steps:
      - attach_workspace:
          at: ~/jars
      - heroku/install
      - run: heroku plugins:install java
      - run:
          name: Deploy
          command: |
            CURRENT_VERSION=$(cat ~/jars/release/current_version.txt)
            heroku deploy:jar ~/jars/server-${CURRENT_VERSION}-shaded.jar -a fb-rules-exchange
      - run:
          name: Create Release Notes
          command: |
            CURRENT_VERSION=$(cat ~/jars/release/current_version.txt)
            if [ -f ~/jars/release/release_notes.txt ]; then 
              RELEASE_NOTES=$(cat ~/jars/release/release_notes.txt)
            else
              RELEASE_NOTES="Initial Release"
            fi
            if [ "${GITHUB_AUTH_TOKEN}" != "" -a "${RELEASE_NOTES}" != "" ]; then
              curl -H "Authorization: bearer ${GITHUB_AUTH_TOKEN}" -X POST "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases" -X POST -d "{\"tag_name\":\"${CURRENT_VERSION}\", \"name\":\"${CURRENT_VERSION}\", \"target_commitish\":\"${CIRCLE_SHA1}\", \"body\": \"${RELEASE_NOTES}\"}"
            fi

workflows:
  version: 2.1
  build_pipeline:
    jobs:
      - build
      - hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only:
                - master
