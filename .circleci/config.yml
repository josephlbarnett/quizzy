version: 2.1
orbs:
  release: trib3/release@2.3.0

jobs:
  build:
    machine:
      image: ubuntu-2204:2022.04.2

    working_directory: ~/repo
    environment:
      MAVEN_OPTS: -XX:MaxRAM=2g

    steps:
      # get code
      - checkout
      # handle dependency caching and run build
      - restore_cache:
          keys:
            - v7-dependencies-{{ .Branch }}-{{ .Revision }}
            - v7-dependencies-{{ .Branch }}
            - v7-dependencies-
      - restore_cache:
          keys:
            - v7-npms-{{ .Branch }}-{{ .Revision }}
            - v7-npms-{{ .Branch }}
            - v7-npms-
      - restore_cache:
          keys:
            - v7-email-npms-{{ .Branch }}-{{ .Revision }}
            - v7-email-npms-{{ .Branch }}
            - v7-email-npms-
      - run:
          name: npm build emails
          command: |
            cd emails
            npm install
            mkdir -p dist/emails
            npm run mjml
      - save_cache:
          paths:
            - ~/repo/emails/node_modules
          key: v7-email-npms-{{ .Branch }}-{{ .Revision }}
      - run:
          name: Set Maven Version
          command: |
            BASE_VERSION=$(mvn -q  -Dexec.executable="echo" -Dexec.args='${project.version}' --non-recursive exec:exec|sed 's/-SNAPSHOT.*//')
            if [ "$CIRCLE_BRANCH" = "main" ]; then
              NEW_PROJECT_VERSION=${BASE_VERSION}.${CIRCLE_BUILD_NUM}
            else
              NEW_PROJECT_VERSION=${BASE_VERSION}-${CIRCLE_BRANCH}-SNAPSHOT
            fi
            mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${NEW_PROJECT_VERSION}
            echo ${NEW_PROJECT_VERSION} > ~/repo/current_version.txt
      - run: mvn install -U -pl .,api,emails,persistence,graphql,client
      - run:
          name: npm build client
          command: |
            cd client
            npm install
            npm run generate
            npm run lint
            npm run test:unit
            npm run build
      - save_cache:
          paths:
            - ~/repo/client/node_modules
          key: v7-npms-{{ .Branch }}-{{ .Revision }}
      - run: mvn install -U -pl client,server
      - save_cache:
          paths:
            - ~/.m2
          key: v7-dependencies-{{ .Branch }}-{{ .Revision }}
      # collect test results and upload coverage
      - run: mkdir -p ~/test_results
      - run: find . -type f -regex ".*/target/surefire-reports/junitreports/.*xml" -exec cp {} ~/test_results/ \;
      - store_test_results:
          path: ~/test_results
      - store_artifacts:
          path: ~/test_results
      - run:
          name: Upload coverage report
          command: |
            echo $CODECOV_GPG_KEY | sed 's/\$/\n/g' | gpg --import
            curl https://uploader.codecov.io/latest/linux/codecov > ~/codecov
            curl https://uploader.codecov.io/latest/linux/codecov.SHA256SUM > ~/codecov.SHA256SUM
            curl https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig > ~/codecov.SHA256SUM.sig
            cd ~
            gpg --verify codecov.SHA256SUM.sig codecov.SHA256SUM
            if [ $? -ne 0 ]; then
             echo "bad signature on codecov SHA256SUM file"
             exit 1
            fi
            shasum -a 256  -c codecov.SHA256SUM
            if [ $? -eq 0 ]; then
              chmod +x ~/codecov
              cd ~/repo
              ~/codecov -t ${CODECOV_TOKEN}
            else
              echo "bad checksum on codecov binary"
              exit 1
            fi
      - run:
          name: Collect Docs
          command: |
            mkdir -p ~/docs
            for subdir in `find . -maxdepth 1 -mindepth 1 -type d`; do
              if [ -d $subdir/target/dokka ]; then
                cp -r $subdir/target/dokka ~/docs/$subdir
              fi
            done
            mkdir -p ~/docarchive
            cd ~/docs && zip -r ~/docarchive/docs.zip .
      - store_artifacts:
          path: ~/docarchive
      # collect built packages and save to workspace for deploy
      - run: mkdir -p ~/jars
      - run: find . -type f -regex ".*/target/.*jar" -exec cp {} ~/jars/ \;
      - run: find . -type f -regex ".*/target/.*zip" -exec cp {} ~/jars/ \;
      - run:
          name: Collect Fly artifacts
          command: |
            mkdir -p ~/jars/fly
            cp Dockerfile ~/jars/fly
            cp fly.toml ~/jars/fly
            mkdir -p ~/jars/fly/server/target
            cp server/target/*-shaded.jar ~/jars/fly/server/target
      - release/prep_release:
          release_dir: ~/jars/release
          current_version: ~/repo/current_version.txt
          current_version_import: True
      - store_artifacts:
          path: ~/jars
      - persist_to_workspace:
          root: ~/jars
          paths:
            - .

  deploy:
    docker:
      - image: cimg/openjdk:11.0-node
    steps:
      - attach_workspace:
          at: ~/jars
      - run:
          name: Install flyctl
          command: |
            curl -L https://github.com/superfly/flyctl/releases/download/v0.0.385/flyctl_0.0.385_Linux_x86_64.tar.gz -o flyctl.tar.gz
            tar xzf flyctl.tar.gz
            echo "bd29e96460a0332879ae940c037359803739551fdf171d0bb67a39d434dc00d7  flyctl" > flyctl.sum
            sha256sum -c flyctl.sum
            if [ $? -ne 0 ]; then
                echo "Bad flyctl checksum!"
                exit 1
            fi
            rm flyctl.sum
            rm flyctl.tar.gz
            sudo mv flyctl /usr/bin/
      - run:
          name: Deploy
          command: |
            CURRENT_VERSION=$(cat ~/jars/release/current_version.txt)
            cd ~/jars/fly
            flyctl deploy --build-arg CURRENT_VERSION=${CURRENT_VERSION}
      - run:
          name: Create Release Notes
          command: |
            CURRENT_VERSION=$(cat ~/jars/release/current_version.txt)
            if [ -f ~/jars/release/release_notes.txt ]; then 
              RELEASE_NOTES=$(cat ~/jars/release/release_notes.txt)
            else
              RELEASE_NOTES="Initial Release"
            fi
            if [ "${GITHUB_AUTH_TOKEN}" != "" -a "${RELEASE_NOTES}" != "" -a "${CIRCLE_BRANCH}" = "main" ]; then
              curl -H "Authorization: bearer ${GITHUB_AUTH_TOKEN}" -X POST "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/releases" -X POST -d "{\"tag_name\":\"${CURRENT_VERSION}\", \"name\":\"${CURRENT_VERSION}\", \"target_commitish\":\"${CIRCLE_SHA1}\", \"body\": \"${RELEASE_NOTES}\"}"
            fi

workflows:
  version: 2.1
  build_pipeline:
    jobs:
      - build
      - hold:
          type: approval
          requires:
            - build
          filters:
            branches:
              only:
                - main
      - deploy:
          requires:
            - hold
          filters:
            branches:
              only:
                - main
